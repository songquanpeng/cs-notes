(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{417:function(t,s,a){"use strict";a.r(s);var e=a(44),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"python-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python-数据结构"}},[t._v("#")]),t._v(" Python 数据结构")]),t._v(" "),a("h2",{attrs:{id:"通用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用"}},[t._v("#")]),t._v(" 通用")]),t._v(" "),a("ol",[a("li",[t._v("长度："),a("code",[t._v("len(a)")])]),t._v(" "),a("li",[t._v("浅拷贝："),a("code",[t._v("a.copy()")]),t._v(" 或者 "),a("code",[t._v("copy.copy(a)")])]),t._v(" "),a("li",[t._v("深拷贝："),a("code",[t._v("copy.deepcopy(a)")])]),t._v(" "),a("li",[t._v("成员检测运算符："),a("code",[t._v("e in a")]),t._v(" 也可 "),a("code",[t._v("e not in a")])]),t._v(" "),a("li",[t._v("下标引用："),a("code",[t._v("a[n]")])]),t._v(" "),a("li",[t._v("清空："),a("code",[t._v("clear()")])])]),t._v(" "),a("h2",{attrs:{id:"列表-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表-数组"}},[t._v("#")]),t._v(" 列表 / 数组")]),t._v(" "),a("ol",[a("li",[t._v("创建\t"),a("code",[t._v("a = []")]),t._v(" 或者 "),a("code",[t._v("a = list()")]),t._v("。")]),t._v(" "),a("li",[t._v("切片："),a("code",[t._v("a[m:n]")]),t._v("，左闭右开，即 "),a("code",[t._v("a[n]")]),t._v(" 不在里面。")]),t._v(" "),a("li",[t._v("排序："),a("code",[t._v("sort(*, key=None, reverse=False)")]),t._v("，原地排序，其中 key 是一个带有一个参数的函数。")]),t._v(" "),a("li",[t._v("迭代：\n"),a("ol",[a("li",[a("code",[t._v("for v in [1, 2, 3]")])]),t._v(" "),a("li",[a("code",[t._v("for i, value in enumerate(['A', 'B', 'C'])")])])])]),t._v(" "),a("li",[t._v("列表生成式 / 列表推导式：\n"),a("ul",[a("li",[t._v("单层循环：")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("双层循环：")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ABC'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'XYZ'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AX'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AY'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AZ'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BX'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BY'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BZ'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CX'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CY'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CZ'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[t._v("#")]),t._v(" 元组")]),t._v(" "),a("ol",[a("li",[t._v("不可变序列，通常用于储存异构数据的多项集，也被用于需要同构数据的不可变序列的情况。")]),t._v(" "),a("li",[t._v("创建：\n"),a("ol",[a("li",[t._v("使用一对圆括号来表示空元组: "),a("code",[t._v("()")])]),t._v(" "),a("li",[t._v("使用一个后缀的逗号来表示单元组: "),a("code",[t._v("a,")]),t._v(" 或 "),a("code",[t._v("(a,)")])]),t._v(" "),a("li",[t._v("使用以逗号分隔的多个项: "),a("code",[t._v("a, b, c")]),t._v(" 或 "),a("code",[t._v("(a, b, c)")])]),t._v(" "),a("li",[t._v("使用内置的 "),a("code",[t._v("tuple()")]),t._v(": "),a("code",[t._v("tuple()")]),t._v(" 或 "),a("code",[t._v("tuple(iterable)")])])])])]),t._v(" "),a("h2",{attrs:{id:"字典-哈希表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字典-哈希表"}},[t._v("#")]),t._v(" 字典 / 哈希表")]),t._v(" "),a("ol",[a("li",[t._v("获取值：\n"),a("ol",[a("li",[t._v("如果不存在抛出异常："),a("code",[t._v("value = some_dict[key]")])]),t._v(" "),a("li",[t._v("如果不存在则返回给定的默认值："),a("code",[t._v("value = some_dict.get(key, default_value)")])])])]),t._v(" "),a("li",[t._v("设置默认值，这样不存在时会自动创建：\n"),a("ol",[a("li",[t._v("使用 "),a("code",[t._v("setdefault")]),t._v(" 方法："),a("code",[t._v("some_dict.setdefault(key, value).some_operations")])]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("defaultdict")]),t._v(":")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" collections "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" defaultdict\nlist_dict "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" defaultdict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlist_dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'可以直接访问，无须检查是否 key 存在'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("只有不可变对象才能作为 key，例如 list 不行，但是 tuple 可以，可以通过 "),a("code",[t._v("hash(key)")]),t._v(" 来进行判断，可以哈希就可以做为 key。")])]),t._v(" "),a("h2",{attrs:{id:"集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),a("ol",[a("li",[t._v("创建："),a("code",[t._v("some_set = set(list)")])]),t._v(" "),a("li",[t._v("支持集合运算：\n"),a("ol",[a("li",[t._v("交："),a("code",[t._v("a.intersection(b)")]),t._v(" 或者 "),a("code",[t._v("a & b")])]),t._v(" "),a("li",[t._v("并："),a("code",[t._v("a.union(b)")]),t._v(" 或者 "),a("code",[t._v("a | b")])])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);