(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{400:function(a,t,s){"use strict";s.r(t);var n=s(44),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"pandas-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pandas-数据结构"}},[a._v("#")]),a._v(" Pandas 数据结构")]),a._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" pandas "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" pd\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("from")]),a._v(" pandas "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Series"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" DataFrame\n")])])]),s("h2",{attrs:{id:"series"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#series"}},[a._v("#")]),a._v(" Series")]),a._v(" "),s("p",[a._v("Series 是一种一维的类似数组的数据结构，其包含了一系列值，并有一个与之关联的数据标签，即其索引（index）。\n可以在构造时传入一个 index 数组来手动指定 index。\n由于 index 不只限于数值类型，因此 Series 也可以当成一个固定尺寸的有序字典来用。")]),a._v(" "),s("h3",{attrs:{id:"series-的构造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#series-的构造"}},[a._v("#")]),a._v(" Series 的构造")]),a._v(" "),s("ol",[s("li",[a._v("传入列表："),s("code",[a._v("s = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])")])]),a._v(" "),s("li",[a._v("传入字典："),s("code",[a._v("s = pd.Series(a_dict, index=[...])")])])]),a._v(" "),s("h3",{attrs:{id:"series-的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#series-的属性"}},[a._v("#")]),a._v(" Series 的属性")]),a._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[a._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Series"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("values\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# array([1, 2, 3, 4], dtype=int64)")]),a._v("\ns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("index\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# RangeIndex(start=0, stop=4, step=1)")]),a._v("\n")])])]),s("p",[a._v("Series 和其索引都分别有一个 name 属性：")]),a._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[a._v("obj4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'population'")]),a._v("\nobj4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'state'")]),a._v("\n")])])]),s("h3",{attrs:{id:"series-相关的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#series-相关的函数"}},[a._v("#")]),a._v(" Series 相关的函数")]),a._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[a._v("pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("isnull"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nobj4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("isnull"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\npd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("notnull"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h2",{attrs:{id:"dataframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dataframe"}},[a._v("#")]),a._v(" DataFrame")]),a._v(" "),s("ol",[s("li",[a._v("DataFrame 表示了一个长方形的表格，其包含了一组有序的列，每一列可以有一个不同的数据类型。")]),a._v(" "),s("li",[a._v("DataFrame 有一个行索引和一个列索引。")]),a._v(" "),s("li",[a._v("DataFrame 可被认为是一组共享 index 的 Series 的字典。")]),a._v(" "),s("li",[a._v("可以通过直接赋值来修改其属性。")]),a._v(" "),s("li",[a._v("直接 "),s("code",[a._v("df['new_col'] = ...")]),a._v(" 即可创建新的列，使用 del 进行删除。")])]),a._v(" "),s("h3",{attrs:{id:"dataframe-相关的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dataframe-相关的属性"}},[a._v("#")]),a._v(" DataFrame 相关的属性")]),a._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 所有列的名字列表")]),a._v("\ndf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("columns\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 某个列")]),a._v("\ndf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("col_name\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用 loc 属性")]),a._v("\ndf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("loc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 交换行和列")]),a._v("\ndf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("T\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 名字属性")]),a._v("\ndf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'year'")]),a._v("\ndf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("columns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'state'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 获取索引")]),a._v("\ndf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("index\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 获取其值")]),a._v("\ndf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("values\n")])])]),s("h3",{attrs:{id:"dataframe-相关的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dataframe-相关的函数"}},[a._v("#")]),a._v(" DataFrame 相关的函数")]),a._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[a._v("df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);